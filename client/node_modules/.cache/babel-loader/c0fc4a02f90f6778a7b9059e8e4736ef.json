{"ast":null,"code":"var _jsxFileName = \"/home/ivan/javascript_projects/connect_four/src/Cell.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useGameContext } from './GameContext';\nimport { isLegalMove } from './GameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst diskColourToRender = {\n  0: \"empty\",\n  1: \"player-one\",\n  2: \"player-two\"\n};\n\nconst Cell = _ref => {\n  _s();\n\n  let {\n    cellState,\n    cellIndex\n  } = _ref;\n  const {\n    boardState,\n    setColOfNewDisk,\n    moveCounter,\n    setMoveCounter,\n    isGameOver,\n    colCursor,\n    setCurrentCol\n  } = useGameContext();\n\n  const selectNewDiskCol = async () => {\n    const colOfNewDisk = cellIndex % 7;\n\n    if (isLegalMove(boardState, colOfNewDisk) && !isGameOver) {\n      // add code here for the animation of the disk\n      setColOfNewDisk(colOfNewDisk);\n      await setMoveCounter(moveCounter + 1); // wait for setMoveCounter to finish before useEffect in GameContext \n      // is executed with the updated value of moveCounter.\n    }\n  };\n\n  const updateColCursor = () => {\n    const newValOfColCursor = cellIndex % 7;\n\n    if (newValOfColCursor !== colCursor) {\n      setCurrentCol(newValOfColCursor);\n    }\n  };\n\n  console.log();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-cell\",\n    onClick: selectNewDiskCol,\n    onMouseOver: updateColCursor,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `emptyDiskSpace ${diskColourToRender[cellState]}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), !cellState || /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"disk\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cell, \"NEuI/sjx/wcjb3vSmZhnTz/U2f8=\", false, function () {\n  return [useGameContext];\n});\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/Cell.js"],"names":["React","useState","useGameContext","isLegalMove","diskColourToRender","Cell","cellState","cellIndex","boardState","setColOfNewDisk","moveCounter","setMoveCounter","isGameOver","colCursor","setCurrentCol","selectNewDiskCol","colOfNewDisk","updateColCursor","newValOfColCursor","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAGA,MAAMC,kBAAkB,GAAG;AACvB,KAAG,OADoB;AAEvB,KAAG,YAFoB;AAGvB,KAAG;AAHoB,CAA3B;;AAMA,MAAMC,IAAI,GAAG,QAA4B;AAAA;;AAAA,MAA3B;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAA2B;AACrC,QAAM;AACFC,IAAAA,UADE;AAEFC,IAAAA,eAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,cAJE;AAKFC,IAAAA,UALE;AAMFC,IAAAA,SANE;AAOFC,IAAAA;AAPE,MAQFZ,cAAc,EARlB;;AAWA,QAAMa,gBAAgB,GAAG,YAAW;AAChC,UAAMC,YAAY,GAAGT,SAAS,GAAG,CAAjC;;AACA,QAAIJ,WAAW,CAACK,UAAD,EAAaQ,YAAb,CAAX,IAA0C,CAACJ,UAA/C,EAA4D;AACxD;AACAH,MAAAA,eAAe,CAACO,YAAD,CAAf;AACA,YAAML,cAAc,CAACD,WAAW,GAAG,CAAf,CAApB,CAHwD,CAIxD;AACA;AACH;AACJ,GATD;;AAWA,QAAMO,eAAe,GAAG,MAAM;AAC1B,UAAMC,iBAAiB,GAAGX,SAAS,GAAG,CAAtC;;AACA,QAAIW,iBAAiB,KAAKL,SAA1B,EAAqC;AACjCC,MAAAA,aAAa,CAACI,iBAAD,CAAb;AACH;AACJ,GALD;;AAMAC,EAAAA,OAAO,CAACC,GAAR;AACA,sBACI;AACA,IAAA,SAAS,EAAC,WADV;AAEA,IAAA,OAAO,EAAEL,gBAFT;AAGA,IAAA,WAAW,EAAEE,eAHb;AAAA,4BAKI;AAAK,MAAA,SAAS,EAAG,kBAAiBb,kBAAkB,CAACE,SAAD,CAAY;AAAhE;AAAA;AAAA;AAAA;AAAA,YALJ,EAMK,CAACA,SAAD,iBAAc;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YANnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAxCD;;GAAMD,I;UASEH,c;;;KATFG,I;AA0CN,eAAeA,IAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useGameContext } from './GameContext';\nimport { isLegalMove } from './GameLogic';\n\n\nconst diskColourToRender = {\n    0: \"empty\",\n    1: \"player-one\",\n    2: \"player-two\",\n};\n\nconst Cell = ({cellState, cellIndex}) => {\n    const {\n        boardState,\n        setColOfNewDisk, \n        moveCounter, \n        setMoveCounter, \n        isGameOver,\n        colCursor,\n        setCurrentCol,\n    } = useGameContext();\n\n\n    const selectNewDiskCol = async() => {\n        const colOfNewDisk = cellIndex % 7;\n        if (isLegalMove(boardState, colOfNewDisk) && (!isGameOver)) {\n            // add code here for the animation of the disk\n            setColOfNewDisk(colOfNewDisk);\n            await setMoveCounter(moveCounter + 1);\n            // wait for setMoveCounter to finish before useEffect in GameContext \n            // is executed with the updated value of moveCounter.\n        }\n    };\n\n    const updateColCursor = () => {\n        const newValOfColCursor = cellIndex % 7;\n        if (newValOfColCursor !== colCursor) {\n            setCurrentCol(newValOfColCursor);\n        }\n    }\n    console.log()\n    return (\n        <div \n        className='game-cell' \n        onClick={selectNewDiskCol}\n        onMouseOver={updateColCursor}\n        >\n            <div className={`emptyDiskSpace ${diskColourToRender[cellState]}`}/>\n            {!cellState || <div className='disk'/>}\n        </div>\n    );\n}\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}