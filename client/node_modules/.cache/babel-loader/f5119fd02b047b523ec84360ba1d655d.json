{"ast":null,"code":"var _jsxFileName = \"/home/ivan/javascript_projects/connect_four/src/Cell.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { useGameContext } from './GameContext';\nimport { isLegalMove } from './GameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst diskColour = {\n  0: \"empty\",\n  1: \"player-one\",\n  2: \"player-two\"\n};\n\nconst Cell = _ref => {\n  _s();\n\n  let {\n    cellState,\n    cellIndex\n  } = _ref;\n  const {\n    boardState,\n    setColOfNewDisk,\n    moveCounter,\n    setMoveCounter,\n    isGameOver,\n    colCursor,\n    setCurrentCol,\n    cellIndexOfNewDisk\n  } = useGameContext();\n  const cellRef = useRef();\n  const isAnimating = useRef(false); // only animating one of animating disk or static disk (empty or filled)\n  // need a way to keep track when this cell is first filled with a disk \n  // so this can be rendered with animation\n\n  const updateNewDiskAnimation = () => {\n    const rowOfNewDisk = Math.floor(cellIndexOfNewDisk / 7);\n    const boundingRect = cellRef.current.getBoundingClientRect();\n    const leftOffset = boundingRect.left;\n    const heightOfCell = boundingRect.height;\n    const topOfNewDiskAtStart = boundingRect.top - (rowOfNewDisk + 0.5) * heightOfCell;\n    console.log(boundingRect);\n  };\n\n  const selectNewDiskCol = async () => {\n    const colOfNewDisk = cellIndex % 7;\n\n    if (isLegalMove(boardState, colOfNewDisk) && !isGameOver) {\n      // right now this is returning the diskref that you are clicking\n      // not the cell with the new disk !!\n      //console.log(cellRef.current.getBoundingClientRect());\n      setColOfNewDisk(colOfNewDisk);\n      await setMoveCounter(moveCounter + 1); // wait for setMoveCounter to finish before useEffect in GameContext \n      // is executed with the updated value of moveCounter.\n    }\n  };\n\n  const updateColCursor = () => {\n    const newValOfColCursor = cellIndex % 7;\n\n    if (newValOfColCursor !== colCursor) {\n      setCurrentCol(newValOfColCursor);\n    }\n  };\n\n  useEffect(() => {\n    if (cellIndexOfNewDisk === cellIndex) {\n      isAnimating.current = true;\n      updateNewDiskAnimation();\n    } else {\n      isAnimating.current = false;\n    }\n  }, [cellIndexOfNewDisk]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-cell\",\n    onClick: selectNewDiskCol,\n    onMouseOver: updateColCursor,\n    ref: cellRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `empty-disk-space`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `fixed-disk ${diskColour[cellState]}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cell, \"NEoi0cc09N/xrIVcpWeJvinqpGQ=\", false, function () {\n  return [useGameContext];\n});\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/Cell.js"],"names":["React","useEffect","useRef","useGameContext","isLegalMove","diskColour","Cell","cellState","cellIndex","boardState","setColOfNewDisk","moveCounter","setMoveCounter","isGameOver","colCursor","setCurrentCol","cellIndexOfNewDisk","cellRef","isAnimating","updateNewDiskAnimation","rowOfNewDisk","Math","floor","boundingRect","current","getBoundingClientRect","leftOffset","left","heightOfCell","height","topOfNewDiskAtStart","top","console","log","selectNewDiskCol","colOfNewDisk","updateColCursor","newValOfColCursor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAGA,MAAMC,UAAU,GAAG;AACf,KAAG,OADY;AAEf,KAAG,YAFY;AAGf,KAAG;AAHY,CAAnB;;AAMA,MAAMC,IAAI,GAAG,QAA4B;AAAA;;AAAA,MAA3B;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAA2B;AACrC,QAAM;AACFC,IAAAA,UADE;AAEFC,IAAAA,eAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,cAJE;AAKFC,IAAAA,UALE;AAMFC,IAAAA,SANE;AAOFC,IAAAA,aAPE;AAQFC,IAAAA;AARE,MASFb,cAAc,EATlB;AAWA,QAAMc,OAAO,GAAGf,MAAM,EAAtB;AACA,QAAMgB,WAAW,GAAGhB,MAAM,CAAC,KAAD,CAA1B,CAbqC,CAcrC;AAEA;AACA;;AAEA,QAAMiB,sBAAsB,GAAG,MAAM;AACjC,UAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWN,kBAAkB,GAAG,CAAhC,CAArB;AACA,UAAMO,YAAY,GAAGN,OAAO,CAACO,OAAR,CAAgBC,qBAAhB,EAArB;AACA,UAAMC,UAAU,GAAGH,YAAY,CAACI,IAAhC;AACA,UAAMC,YAAY,GAAGL,YAAY,CAACM,MAAlC;AACA,UAAMC,mBAAmB,GAAGP,YAAY,CAACQ,GAAb,GAAoB,CAACX,YAAY,GAAG,GAAhB,IAAuBQ,YAAvE;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYV,YAAZ;AACH,GAPD;;AASA,QAAMW,gBAAgB,GAAG,YAAW;AAChC,UAAMC,YAAY,GAAG3B,SAAS,GAAG,CAAjC;;AACA,QAAIJ,WAAW,CAACK,UAAD,EAAa0B,YAAb,CAAX,IAA0C,CAACtB,UAA/C,EAA4D;AACxD;AACA;AACA;AACAH,MAAAA,eAAe,CAACyB,YAAD,CAAf;AACA,YAAMvB,cAAc,CAACD,WAAW,GAAG,CAAf,CAApB,CALwD,CAMxD;AACA;AACH;AACJ,GAXD;;AAaA,QAAMyB,eAAe,GAAG,MAAM;AAC1B,UAAMC,iBAAiB,GAAG7B,SAAS,GAAG,CAAtC;;AACA,QAAI6B,iBAAiB,KAAKvB,SAA1B,EAAqC;AACjCC,MAAAA,aAAa,CAACsB,iBAAD,CAAb;AACH;AACJ,GALD;;AAOApC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIe,kBAAkB,KAAKR,SAA3B,EAAsC;AAClCU,MAAAA,WAAW,CAACM,OAAZ,GAAsB,IAAtB;AACAL,MAAAA,sBAAsB;AACzB,KAHD,MAGO;AACHD,MAAAA,WAAW,CAACM,OAAZ,GAAsB,KAAtB;AACH;AACJ,GAPQ,EAON,CAACR,kBAAD,CAPM,CAAT;AASA,sBACI;AACA,IAAA,SAAS,EAAC,WADV;AAEA,IAAA,OAAO,EAAEkB,gBAFT;AAGA,IAAA,WAAW,EAAEE,eAHb;AAIA,IAAA,GAAG,EAAEnB,OAJL;AAAA,4BAMI;AAAK,MAAA,SAAS,EAAG;AAAjB;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAK,MAAA,SAAS,EAAG,cAAaZ,UAAU,CAACE,SAAD,CAAY;AAApD;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CApED;;GAAMD,I;UAUEH,c;;;KAVFG,I;AAsEN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useGameContext } from './GameContext';\nimport { isLegalMove } from './GameLogic';\n\n\nconst diskColour = {\n    0: \"empty\",\n    1: \"player-one\",\n    2: \"player-two\",\n};\n\nconst Cell = ({cellState, cellIndex}) => {\n    const {\n        boardState,\n        setColOfNewDisk, \n        moveCounter, \n        setMoveCounter, \n        isGameOver,\n        colCursor,\n        setCurrentCol,\n        cellIndexOfNewDisk,\n    } = useGameContext();\n\n    const cellRef = useRef();\n    const isAnimating = useRef(false);\n    // only animating one of animating disk or static disk (empty or filled)\n\n    // need a way to keep track when this cell is first filled with a disk \n    // so this can be rendered with animation\n\n    const updateNewDiskAnimation = () => {\n        const rowOfNewDisk = Math.floor(cellIndexOfNewDisk / 7);\n        const boundingRect = cellRef.current.getBoundingClientRect();\n        const leftOffset = boundingRect.left;\n        const heightOfCell = boundingRect.height;\n        const topOfNewDiskAtStart = boundingRect.top - ((rowOfNewDisk + 0.5) * heightOfCell);\n        console.log(boundingRect);\n    };\n\n    const selectNewDiskCol = async() => {\n        const colOfNewDisk = cellIndex % 7;\n        if (isLegalMove(boardState, colOfNewDisk) && (!isGameOver)) {\n            // right now this is returning the diskref that you are clicking\n            // not the cell with the new disk !!\n            //console.log(cellRef.current.getBoundingClientRect());\n            setColOfNewDisk(colOfNewDisk);\n            await setMoveCounter(moveCounter + 1);\n            // wait for setMoveCounter to finish before useEffect in GameContext \n            // is executed with the updated value of moveCounter.\n        }\n    };\n\n    const updateColCursor = () => {\n        const newValOfColCursor = cellIndex % 7;\n        if (newValOfColCursor !== colCursor) {\n            setCurrentCol(newValOfColCursor);\n        }\n    };\n\n    useEffect(() => {\n        if (cellIndexOfNewDisk === cellIndex) {\n            isAnimating.current = true;\n            updateNewDiskAnimation();\n        } else {\n            isAnimating.current = false;\n        }\n    }, [cellIndexOfNewDisk]);\n\n    return (\n        <div \n        className='game-cell'\n        onClick={selectNewDiskCol}\n        onMouseOver={updateColCursor}\n        ref={cellRef}\n        >\n            <div className={`empty-disk-space`}/>\n            <div className={`fixed-disk ${diskColour[cellState]}`}/>\n        </div>\n    );\n}\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}