{"ast":null,"code":"var _jsxFileName = \"/home/ivan/javascript_projects/connect_four/src/Cell.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { useGameContext } from './GameContext';\nimport { isLegalMove } from './GameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst diskColour = {\n  0: \"empty\",\n  1: \"player-one\",\n  2: \"player-two\"\n};\n\nconst Cell = _ref => {\n  _s();\n\n  let {\n    cellState,\n    cellIndex\n  } = _ref;\n  const {\n    boardState,\n    setColOfNewDisk,\n    moveCounter,\n    setMoveCounter,\n    isGameOver,\n    colCursor,\n    setCurrentCol,\n    cellIndexOfNewDisk\n  } = useGameContext();\n  const cellRef = useRef();\n  const diskRef = useRef();\n  const isAnimating = cellIndexOfNewDisk === cellIndex; // only animating one of animating disk or static disk (empty or filled)\n  // need a way to keep track when this cell is first filled with a disk \n  // so this can be rendered with animation\n  // a = g, v = gt, displacement = gt^2, \n\n  const updateNewDiskAnimation = () => {\n    const rowOfNewDisk = Math.floor(cellIndexOfNewDisk / 7);\n    const boundingRectOfCell = cellRef.current.getBoundingClientRect();\n    const boundingRectOfDisk = cellRef.current.getBoundingClientRect();\n    const leftOffset = boundingRect.left;\n    const heightOfCell = boundingRect.height;\n    const topOfNewDiskAtStart = boundingRect.top - rowOfNewDisk * heightOfCell;\n    console.log(boundingRect);\n  };\n\n  const selectNewDiskCol = async () => {\n    const colOfNewDisk = cellIndex % 7;\n\n    if (isLegalMove(boardState, colOfNewDisk) && !isGameOver) {\n      // right now this is returning the diskref that you are clicking\n      // not the cell with the new disk !!\n      //console.log(cellRef.current.getBoundingClientRect());\n      setColOfNewDisk(colOfNewDisk);\n      await setMoveCounter(moveCounter + 1); // wait for setMoveCounter to finish before useEffect in GameContext \n      // is executed with the updated value of moveCounter.\n    }\n  };\n\n  const updateColCursor = () => {\n    const newValOfColCursor = cellIndex % 7;\n\n    if (newValOfColCursor !== colCursor) {\n      setCurrentCol(newValOfColCursor);\n    }\n  };\n\n  useEffect(() => {\n    if (isAnimating) {\n      updateNewDiskAnimation();\n    }\n  }, [cellIndexOfNewDisk]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-cell\",\n    onClick: selectNewDiskCol,\n    onMouseOver: updateColCursor,\n    ref: cellRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `empty-disk-space`,\n      ref: diskRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${isAnimating ? \"new-disk\" : \"fixed-disk\"} ${diskColour[cellState]}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cell, \"1wY7Z88N0TLAcAIZVYor/qQS/Sw=\", false, function () {\n  return [useGameContext];\n});\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/Cell.js"],"names":["React","useEffect","useRef","useGameContext","isLegalMove","diskColour","Cell","cellState","cellIndex","boardState","setColOfNewDisk","moveCounter","setMoveCounter","isGameOver","colCursor","setCurrentCol","cellIndexOfNewDisk","cellRef","diskRef","isAnimating","updateNewDiskAnimation","rowOfNewDisk","Math","floor","boundingRectOfCell","current","getBoundingClientRect","boundingRectOfDisk","leftOffset","boundingRect","left","heightOfCell","height","topOfNewDiskAtStart","top","console","log","selectNewDiskCol","colOfNewDisk","updateColCursor","newValOfColCursor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAGA,MAAMC,UAAU,GAAG;AACf,KAAG,OADY;AAEf,KAAG,YAFY;AAGf,KAAG;AAHY,CAAnB;;AAMA,MAAMC,IAAI,GAAG,QAA4B;AAAA;;AAAA,MAA3B;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAA2B;AACrC,QAAM;AACFC,IAAAA,UADE;AAEFC,IAAAA,eAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,cAJE;AAKFC,IAAAA,UALE;AAMFC,IAAAA,SANE;AAOFC,IAAAA,aAPE;AAQFC,IAAAA;AARE,MASFb,cAAc,EATlB;AAWA,QAAMc,OAAO,GAAGf,MAAM,EAAtB;AACA,QAAMgB,OAAO,GAAGhB,MAAM,EAAtB;AACA,QAAMiB,WAAW,GAAGH,kBAAkB,KAAKR,SAA3C,CAdqC,CAerC;AAEA;AACA;AACA;;AAEA,QAAMY,sBAAsB,GAAG,MAAM;AACjC,UAAMC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWP,kBAAkB,GAAG,CAAhC,CAArB;AACA,UAAMQ,kBAAkB,GAAGP,OAAO,CAACQ,OAAR,CAAgBC,qBAAhB,EAA3B;AACA,UAAMC,kBAAkB,GAAEV,OAAO,CAACQ,OAAR,CAAgBC,qBAAhB,EAA1B;AACA,UAAME,UAAU,GAAGC,YAAY,CAACC,IAAhC;AACA,UAAMC,YAAY,GAAGF,YAAY,CAACG,MAAlC;AACA,UAAMC,mBAAmB,GAAGJ,YAAY,CAACK,GAAb,GAAqBb,YAAD,GAAiBU,YAAjE;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACH,GARD;;AAUA,QAAMQ,gBAAgB,GAAG,YAAW;AAChC,UAAMC,YAAY,GAAG9B,SAAS,GAAG,CAAjC;;AACA,QAAIJ,WAAW,CAACK,UAAD,EAAa6B,YAAb,CAAX,IAA0C,CAACzB,UAA/C,EAA4D;AACxD;AACA;AACA;AACAH,MAAAA,eAAe,CAAC4B,YAAD,CAAf;AACA,YAAM1B,cAAc,CAACD,WAAW,GAAG,CAAf,CAApB,CALwD,CAMxD;AACA;AACH;AACJ,GAXD;;AAaA,QAAM4B,eAAe,GAAG,MAAM;AAC1B,UAAMC,iBAAiB,GAAGhC,SAAS,GAAG,CAAtC;;AACA,QAAIgC,iBAAiB,KAAK1B,SAA1B,EAAqC;AACjCC,MAAAA,aAAa,CAACyB,iBAAD,CAAb;AACH;AACJ,GALD;;AAOAvC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkB,WAAJ,EAAiB;AACbC,MAAAA,sBAAsB;AACzB;AACJ,GAJQ,EAIN,CAACJ,kBAAD,CAJM,CAAT;AAMA,sBACI;AACA,IAAA,SAAS,EAAC,WADV;AAEA,IAAA,OAAO,EAAEqB,gBAFT;AAGA,IAAA,WAAW,EAAEE,eAHb;AAIA,IAAA,GAAG,EAAEtB,OAJL;AAAA,4BAMI;AACA,MAAA,SAAS,EAAG,kBADZ;AAEA,MAAA,GAAG,EAAEC;AAFL;AAAA;AAAA;AAAA;AAAA,YANJ,eAUI;AACA,MAAA,SAAS,EAAG,GAAEC,WAAW,GAAG,UAAH,GAAc,YAAa,IAAGd,UAAU,CAACE,SAAD,CAAY;AAD7E;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CAzED;;GAAMD,I;UAUEH,c;;;KAVFG,I;AA2EN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useGameContext } from './GameContext';\nimport { isLegalMove } from './GameLogic';\n\n\nconst diskColour = {\n    0: \"empty\",\n    1: \"player-one\",\n    2: \"player-two\",\n};\n\nconst Cell = ({cellState, cellIndex}) => {\n    const {\n        boardState,\n        setColOfNewDisk, \n        moveCounter, \n        setMoveCounter, \n        isGameOver,\n        colCursor,\n        setCurrentCol,\n        cellIndexOfNewDisk,\n    } = useGameContext();\n\n    const cellRef = useRef();\n    const diskRef = useRef();\n    const isAnimating = cellIndexOfNewDisk === cellIndex;\n    // only animating one of animating disk or static disk (empty or filled)\n\n    // need a way to keep track when this cell is first filled with a disk \n    // so this can be rendered with animation\n    // a = g, v = gt, displacement = gt^2, \n\n    const updateNewDiskAnimation = () => {\n        const rowOfNewDisk = Math.floor(cellIndexOfNewDisk / 7);\n        const boundingRectOfCell = cellRef.current.getBoundingClientRect();\n        const boundingRectOfDisk= cellRef.current.getBoundingClientRect();\n        const leftOffset = boundingRect.left;\n        const heightOfCell = boundingRect.height;\n        const topOfNewDiskAtStart = boundingRect.top - ((rowOfNewDisk) * heightOfCell);\n        console.log(boundingRect);\n    };\n\n    const selectNewDiskCol = async() => {\n        const colOfNewDisk = cellIndex % 7;\n        if (isLegalMove(boardState, colOfNewDisk) && (!isGameOver)) {\n            // right now this is returning the diskref that you are clicking\n            // not the cell with the new disk !!\n            //console.log(cellRef.current.getBoundingClientRect());\n            setColOfNewDisk(colOfNewDisk);\n            await setMoveCounter(moveCounter + 1);\n            // wait for setMoveCounter to finish before useEffect in GameContext \n            // is executed with the updated value of moveCounter.\n        }\n    };\n\n    const updateColCursor = () => {\n        const newValOfColCursor = cellIndex % 7;\n        if (newValOfColCursor !== colCursor) {\n            setCurrentCol(newValOfColCursor);\n        }\n    };\n\n    useEffect(() => {\n        if (isAnimating) {\n            updateNewDiskAnimation();\n        }\n    }, [cellIndexOfNewDisk]);\n\n    return (\n        <div \n        className='game-cell'\n        onClick={selectNewDiskCol}\n        onMouseOver={updateColCursor}\n        ref={cellRef}\n        >\n            <div \n            className={`empty-disk-space`} \n            ref={diskRef}\n            />\n            <div \n            className={`${isAnimating ? \"new-disk\":\"fixed-disk\"} ${diskColour[cellState]}`}\n            />\n        </div>\n    );\n}\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}