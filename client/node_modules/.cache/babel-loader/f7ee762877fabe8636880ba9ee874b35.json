{"ast":null,"code":"var _jsxFileName = \"/home/ivan/javascript_projects/connect_four/src/GameContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/React.createContext();\nconst initialBoardState = [];\n\nfor (let i = 0; i < 6; i++) {\n  initialBoardState[i] = [];\n\n  for (let j = 0; j < 7; j++) {\n    initialBoardState[i][j] = 0;\n  }\n}\n\nconst GameContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // the children being passed in is the app component!!!\n  const [boardState, setBoardState] = useState(initialBoardState);\n  const [activePlayerNum, setActivePlayerNum] = useState(1);\n  const [colOfNewDisk, setColOfNewDisk] = useState(0);\n  const [moveCounter, setMoveCounter] = useState(0);\n  const didMount = useRef(false);\n  useEffect(() => {\n    if (didMount.current) {} else {\n      didMount.current = true;\n    }\n  }, [colOfNewDisk]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      boardState,\n      setBoardState,\n      activePlayerNum,\n      setActivePlayerNum,\n      colOfNewDisk,\n      setColOfNewDisk\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 12\n  }, this);\n};\n\n_s(GameContextProvider, \"I1JWG9KcdA9W86XjX/JnqBusM+Q=\");\n\n_c = GameContextProvider;\n\nconst useGameContext = () => {\n  _s2();\n\n  return useContext(GameContext);\n};\n\n_s2(useGameContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { useGameContext, GameContextProvider, initialBoardState };\n\nvar _c;\n\n$RefreshReg$(_c, \"GameContextProvider\");","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/GameContext.js"],"names":["React","useContext","useEffect","useRef","useState","GameContext","createContext","initialBoardState","i","j","GameContextProvider","children","boardState","setBoardState","activePlayerNum","setActivePlayerNum","colOfNewDisk","setColOfNewDisk","moveCounter","setMoveCounter","didMount","current","useGameContext"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,MAAtC,EAA8CC,QAA9C,QAA6D,OAA7D;;AAEA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAN,EAApB;AAEA,MAAMC,iBAAiB,GAAG,EAA1B;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBD,EAAAA,iBAAiB,CAACC,CAAD,CAAjB,GAAuB,EAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBF,IAAAA,iBAAiB,CAACC,CAAD,CAAjB,CAAqBC,CAArB,IAA0B,CAA1B;AACH;AACJ;;AAED,MAAMC,mBAAmB,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACxC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAACG,iBAAD,CAA5C;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAMgB,QAAQ,GAAGjB,MAAM,CAAC,KAAD,CAAvB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIkB,QAAQ,CAACC,OAAb,EAAsB,CACrB,CADD,MACO;AACHD,MAAAA,QAAQ,CAACC,OAAT,GAAmB,IAAnB;AACH;AACJ,GALQ,EAKN,CAACL,YAAD,CALM,CAAT;AAMA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAChCJ,MAAAA,UADgC;AAEhCC,MAAAA,aAFgC;AAGhCC,MAAAA,eAHgC;AAIhCC,MAAAA,kBAJgC;AAKhCC,MAAAA,YALgC;AAMhCC,MAAAA;AANgC,KAA7B;AAAA,cAQFN;AARE;AAAA;AAAA;AAAA;AAAA,UAAP;AAUH,CAvBD;;GAAMD,mB;;KAAAA,mB;;AAyBN,MAAMY,cAAc,GAAG,MAAM;AAAA;;AACzB,SAAOrB,UAAU,CAACI,WAAD,CAAjB;AACH,CAFD;;IAAMiB,c;;AAIN,SAAQA,cAAR,EAAwBZ,mBAAxB,EAA6CH,iBAA7C","sourcesContent":["import React, {useContext, useEffect, useRef, useState} from 'react';\n\nconst GameContext = React.createContext();\n\nconst initialBoardState = [];\nfor (let i = 0; i < 6; i++) {\n    initialBoardState[i] = [];\n    for (let j = 0; j < 7; j++) {\n        initialBoardState[i][j] = 0;\n    }\n}\n\nconst GameContextProvider = ({children}) => {\n    // the children being passed in is the app component!!!\n    const [boardState, setBoardState] = useState(initialBoardState);\n    const [activePlayerNum, setActivePlayerNum] = useState(1);\n    const [colOfNewDisk, setColOfNewDisk] = useState(0);\n    const [moveCounter, setMoveCounter] = useState(0);\n    const didMount = useRef(false);\n    useEffect(() => {\n        if (didMount.current) {\n        } else {\n            didMount.current = true;\n        }\n    }, [colOfNewDisk])\n    return <GameContext.Provider value={{\n        boardState, \n        setBoardState,\n        activePlayerNum,\n        setActivePlayerNum,\n        colOfNewDisk,\n        setColOfNewDisk,\n    }}> \n        {children}\n    </GameContext.Provider>\n};\n\nconst useGameContext = () => {\n    return useContext(GameContext);\n}\n\nexport {useGameContext, GameContextProvider, initialBoardState};\n"]},"metadata":{},"sourceType":"module"}