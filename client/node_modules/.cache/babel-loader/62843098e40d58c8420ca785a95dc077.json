{"ast":null,"code":"var _jsxFileName = \"/home/ivan/javascript_projects/connect_four/src/Cell.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useGameContext } from './GameContext';\nimport { isLegalMove } from './GameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst diskColour = {\n  1: \"player-one\",\n  2: \"player-two\"\n};\n\nconst Cell = _ref => {\n  _s();\n\n  let {\n    cellState,\n    cellIndex\n  } = _ref;\n  const {\n    boardState,\n    setCellIndexOfNewDisk,\n    moveCounter,\n    setMoveCounter,\n    isGameOver,\n    colCursor,\n    setCurrentCol\n  } = useGameContext();\n  const cellRef = useRef(); // need a way to keep track when this cell is first filled with a disk \n  // so this can be rendered with animation\n\n  const selectNewDiskCol = async () => {\n    if (isLegalMove(boardState, cellIndex) && !isGameOver) {\n      // right now this is returning the diskref that you are clicking\n      // not the cell with the new disk !!\n      setCellIndexOfNewDisk(cellIndex);\n      await setMoveCounter(moveCounter + 1); // wait for setMoveCounter to finish before useEffect in GameContext \n      // is executed with the updated value of moveCounter.\n    }\n  };\n\n  const updateColCursor = () => {\n    const newValOfColCursor = cellIndex % 7;\n\n    if (newValOfColCursor !== colCursor) {\n      setCurrentCol(newValOfColCursor);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-cell\",\n    onClick: selectNewDiskCol,\n    onMouseOver: updateColCursor,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: cellRef,\n      className: `empty-disk-space`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), !cellState || /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `disk ${diskColour[cellState]}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 28\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cell, \"oioT2n+HD9FKENfbhWK7wOa3juA=\", false, function () {\n  return [useGameContext];\n});\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/Cell.js"],"names":["React","useRef","useGameContext","isLegalMove","diskColour","Cell","cellState","cellIndex","boardState","setCellIndexOfNewDisk","moveCounter","setMoveCounter","isGameOver","colCursor","setCurrentCol","cellRef","selectNewDiskCol","updateColCursor","newValOfColCursor"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAGA,MAAMC,UAAU,GAAG;AACf,KAAG,YADY;AAEf,KAAG;AAFY,CAAnB;;AAKA,MAAMC,IAAI,GAAG,QAA4B;AAAA;;AAAA,MAA3B;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAA2B;AACrC,QAAM;AACFC,IAAAA,UADE;AAEFC,IAAAA,qBAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,cAJE;AAKFC,IAAAA,UALE;AAMFC,IAAAA,SANE;AAOFC,IAAAA;AAPE,MAQFZ,cAAc,EARlB;AAUA,QAAMa,OAAO,GAAGd,MAAM,EAAtB,CAXqC,CAarC;AACA;;AAGA,QAAMe,gBAAgB,GAAG,YAAW;AAChC,QAAIb,WAAW,CAACK,UAAD,EAAaD,SAAb,CAAX,IAAuC,CAACK,UAA5C,EAAyD;AACrD;AACA;AACAH,MAAAA,qBAAqB,CAACF,SAAD,CAArB;AACA,YAAMI,cAAc,CAACD,WAAW,GAAG,CAAf,CAApB,CAJqD,CAKrD;AACA;AACH;AACJ,GATD;;AAWA,QAAMO,eAAe,GAAG,MAAM;AAC1B,UAAMC,iBAAiB,GAAGX,SAAS,GAAG,CAAtC;;AACA,QAAIW,iBAAiB,KAAKL,SAA1B,EAAqC;AACjCC,MAAAA,aAAa,CAACI,iBAAD,CAAb;AACH;AACJ,GALD;;AAOA,sBACI;AACA,IAAA,SAAS,EAAC,WADV;AAEA,IAAA,OAAO,EAAEF,gBAFT;AAGA,IAAA,WAAW,EAAEC,eAHb;AAAA,4BAKI;AAAK,MAAA,GAAG,EAAEF,OAAV;AAAmB,MAAA,SAAS,EAAG;AAA/B;AAAA;AAAA;AAAA;AAAA,YALJ,EAMK,CAACT,SAAD,iBAAc;AAAK,MAAA,SAAS,EAAG,QAAOF,UAAU,CAACE,SAAD,CAAY;AAA9C;AAAA;AAAA;AAAA;AAAA,YANnB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CA7CD;;GAAMD,I;UASEH,c;;;KATFG,I;AA+CN,eAAeA,IAAf","sourcesContent":["import React, { useRef } from 'react'\nimport { useGameContext } from './GameContext';\nimport { isLegalMove } from './GameLogic';\n\n\nconst diskColour = {\n    1: \"player-one\",\n    2: \"player-two\",\n};\n\nconst Cell = ({cellState, cellIndex}) => {\n    const {\n        boardState,\n        setCellIndexOfNewDisk, \n        moveCounter, \n        setMoveCounter, \n        isGameOver,\n        colCursor,\n        setCurrentCol,\n    } = useGameContext();\n\n    const cellRef = useRef();\n\n    // need a way to keep track when this cell is first filled with a disk \n    // so this can be rendered with animation\n\n\n    const selectNewDiskCol = async() => {\n        if (isLegalMove(boardState, cellIndex) && (!isGameOver)) {\n            // right now this is returning the diskref that you are clicking\n            // not the cell with the new disk !!\n            setCellIndexOfNewDisk(cellIndex);\n            await setMoveCounter(moveCounter + 1);\n            // wait for setMoveCounter to finish before useEffect in GameContext \n            // is executed with the updated value of moveCounter.\n        }\n    };\n\n    const updateColCursor = () => {\n        const newValOfColCursor = cellIndex % 7;\n        if (newValOfColCursor !== colCursor) {\n            setCurrentCol(newValOfColCursor);\n        }\n    };\n\n    return (\n        <div \n        className='game-cell'\n        onClick={selectNewDiskCol}\n        onMouseOver={updateColCursor}\n        >\n            <div ref={cellRef} className={`empty-disk-space`}/>\n            {!cellState || <div className={`disk ${diskColour[cellState]}`}/>}\n        </div>\n    );\n}\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}