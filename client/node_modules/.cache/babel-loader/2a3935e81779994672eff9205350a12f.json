{"ast":null,"code":"var _jsxFileName = \"/home/ivan/javascript_projects/connect_four/src/Cell.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { useGameContext } from './gamecontext';\nimport { isLegalMove } from './gamelogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst diskColour = {\n  0: \"empty\",\n  1: \"player-one\",\n  2: \"player-two\"\n};\n\nconst Cell = _ref => {\n  _s();\n\n  let {\n    cellState,\n    cellIndex\n  } = _ref;\n  const {\n    boardState,\n    setColOfNewDisk,\n    moveCounter,\n    setMoveCounter,\n    isGameOver,\n    colCursor,\n    setCurrentCol,\n    cellIndexOfNewDisk\n  } = useGameContext();\n  const cellRef = useRef();\n  const isAnimating = cellIndexOfNewDisk === cellIndex; // renders one of new disk or fixed disk\n\n  const updateNewDiskAnimation = () => {\n    // sets the top margin and animation duration of the falling-disk animation \n    const rowOfNewDisk = Math.floor(cellIndexOfNewDisk / 7);\n    const boundingRectOfCell = cellRef.current.getBoundingClientRect();\n    const cellHeight = boundingRectOfCell.height;\n    const topOfNewDiskAtStart = boundingRectOfCell.top - rowOfNewDisk * cellHeight;\n    const topOfNewDiskAtFinish = boundingRectOfCell.top;\n    const fallingDistOfNewDisk = topOfNewDiskAtFinish - topOfNewDiskAtStart;\n    const fallDuration = 0.02 * Math.sqrt(fallingDistOfNewDisk); // falling distance is proportional to the square of the falling duration \n\n    document.documentElement.style.setProperty('--startTopOfNewDisk', `${topOfNewDiskAtStart}px`);\n    document.documentElement.style.setProperty('--finishTopOfNewDisk', `${topOfNewDiskAtFinish}px`);\n    document.documentElement.style.setProperty('--fallDuration', `${fallDuration}s`);\n  };\n\n  const selectNewDiskCol = async () => {\n    const colOfNewDisk = cellIndex % 7;\n\n    if (isLegalMove(boardState, colOfNewDisk) && !isGameOver) {\n      setColOfNewDisk(colOfNewDisk);\n      await setMoveCounter(moveCounter + 1); // wait for setMoveCounter to finish before useEffect in GameContext \n      // is executed with the updated value of moveCounter.\n    }\n  };\n\n  const updateColCursor = () => {\n    const newValOfColCursor = cellIndex % 7;\n\n    if (newValOfColCursor !== colCursor) {\n      setCurrentCol(newValOfColCursor);\n    }\n  };\n\n  useEffect(() => {\n    if (isAnimating) {\n      updateNewDiskAnimation();\n    }\n  }, [cellIndexOfNewDisk]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-cell\",\n    onClick: selectNewDiskCol,\n    onMouseOver: updateColCursor,\n    ref: cellRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `empty-disk-space`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${isAnimating ? \"new-disk\" : \"fixed-disk\"} ${diskColour[cellState]}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cell, \"51Y6sahWR8eGI3JKBsDoQuSzBg0=\", false, function () {\n  return [useGameContext];\n});\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/Cell.js"],"names":["React","useEffect","useRef","useGameContext","isLegalMove","diskColour","Cell","cellState","cellIndex","boardState","setColOfNewDisk","moveCounter","setMoveCounter","isGameOver","colCursor","setCurrentCol","cellIndexOfNewDisk","cellRef","isAnimating","updateNewDiskAnimation","rowOfNewDisk","Math","floor","boundingRectOfCell","current","getBoundingClientRect","cellHeight","height","topOfNewDiskAtStart","top","topOfNewDiskAtFinish","fallingDistOfNewDisk","fallDuration","sqrt","document","documentElement","style","setProperty","selectNewDiskCol","colOfNewDisk","updateColCursor","newValOfColCursor"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useGameContext } from './gamecontext';\nimport { isLegalMove } from './gamelogic';\n\n\nconst diskColour = {\n    0: \"empty\",\n    1: \"player-one\",\n    2: \"player-two\",\n};\n\nconst Cell = ({cellState, cellIndex}) => {\n    const {\n        boardState,\n        setColOfNewDisk, \n        moveCounter, \n        setMoveCounter, \n        isGameOver,\n        colCursor,\n        setCurrentCol,\n        cellIndexOfNewDisk,\n    } = useGameContext();\n\n    const cellRef = useRef();\n    const isAnimating = cellIndexOfNewDisk === cellIndex;\n    // renders one of new disk or fixed disk\n\n    const updateNewDiskAnimation = () => {\n        // sets the top margin and animation duration of the falling-disk animation \n        const rowOfNewDisk = Math.floor(cellIndexOfNewDisk / 7);\n        const boundingRectOfCell = cellRef.current.getBoundingClientRect();\n        const cellHeight = boundingRectOfCell.height;\n        const topOfNewDiskAtStart = boundingRectOfCell.top - ((rowOfNewDisk) * cellHeight);\n        const topOfNewDiskAtFinish = boundingRectOfCell.top;\n        const fallingDistOfNewDisk = topOfNewDiskAtFinish - topOfNewDiskAtStart;\n        const fallDuration = 0.02*Math.sqrt(fallingDistOfNewDisk);\n        // falling distance is proportional to the square of the falling duration \n        document.documentElement.style.setProperty('--startTopOfNewDisk', `${topOfNewDiskAtStart}px`);\n        document.documentElement.style.setProperty('--finishTopOfNewDisk', `${topOfNewDiskAtFinish}px`);\n        document.documentElement.style.setProperty('--fallDuration', `${fallDuration}s`);\n    };\n\n    const selectNewDiskCol = async() => {\n        const colOfNewDisk = cellIndex % 7;\n        if (isLegalMove(boardState, colOfNewDisk) && (!isGameOver)) {\n            setColOfNewDisk(colOfNewDisk);\n            await setMoveCounter(moveCounter + 1);\n            // wait for setMoveCounter to finish before useEffect in GameContext \n            // is executed with the updated value of moveCounter.\n        }\n    };\n\n    const updateColCursor = () => {\n        const newValOfColCursor = cellIndex % 7;\n        if (newValOfColCursor !== colCursor) {\n            setCurrentCol(newValOfColCursor);\n        }\n    };\n\n    useEffect(() => {\n        if (isAnimating) {\n            updateNewDiskAnimation();\n        }\n    }, [cellIndexOfNewDisk]);\n\n    return (\n        <div \n        className='game-cell'\n        onClick={selectNewDiskCol}\n        onMouseOver={updateColCursor}\n        ref={cellRef}\n        >\n            <div \n            className={`empty-disk-space`} \n            />\n            <div \n            className={`${isAnimating ? \"new-disk\":\"fixed-disk\"} ${diskColour[cellState]}`}\n            />\n        </div>\n    );\n}\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}