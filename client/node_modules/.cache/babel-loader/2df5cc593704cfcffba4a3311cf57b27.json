{"ast":null,"code":"var _jsxFileName = \"/home/ivan/javascript_projects/connect_four/src/Cell.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useGameContext } from './GameContext';\nimport { isLegalMove } from './GameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst diskColourToRender = {\n  0: \"empty\",\n  1: \"player-one\",\n  2: \"player-two\"\n};\n\nconst Cell = _ref => {\n  _s();\n\n  let {\n    cellState,\n    cellIndex\n  } = _ref;\n  const {\n    boardState,\n    setColOfNewDisk,\n    moveCounter,\n    setMoveCounter,\n    isGameOver,\n    colCursor,\n    setColCursor\n  } = useGameContext();\n\n  const selectNewDiskCol = async () => {\n    const colOfNewDisk = cellIndex % 7;\n\n    if (isLegalMove(boardState, colOfNewDisk) && !isGameOver) {\n      setColOfNewDisk(colOfNewDisk);\n      await setMoveCounter(moveCounter + 1); // wait for setMoveCounter to finish before useEffect in GameContext \n      // is executed with the updated value of moveCounter.\n    }\n  };\n\n  const updateColCursor = () => {\n    const newValueOfColCursor = cellIndex % 7;\n\n    if (newValueOfColCursor !== colCursor) {\n      console.log(\"current col: \", cellIndex % 7);\n      setColCursor(cellIndex % 7);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gamecell\",\n    onClick: selectNewDiskCol,\n    onMouseOver: updateColCursor,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `disk ${diskColourToRender[cellState]}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cell, \"6q3IaKW43810+k8p7oG4+bAXUms=\", false, function () {\n  return [useGameContext];\n});\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/Cell.js"],"names":["React","useGameContext","isLegalMove","diskColourToRender","Cell","cellState","cellIndex","boardState","setColOfNewDisk","moveCounter","setMoveCounter","isGameOver","colCursor","setColCursor","selectNewDiskCol","colOfNewDisk","updateColCursor","newValueOfColCursor","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAGA,MAAMC,kBAAkB,GAAG;AACvB,KAAG,OADoB;AAEvB,KAAG,YAFoB;AAGvB,KAAG;AAHoB,CAA3B;;AAMA,MAAMC,IAAI,GAAG,QAA4B;AAAA;;AAAA,MAA3B;AAACC,IAAAA,SAAD;AAAYC,IAAAA;AAAZ,GAA2B;AACrC,QAAM;AACFC,IAAAA,UADE;AAEFC,IAAAA,eAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,cAJE;AAKFC,IAAAA,UALE;AAMFC,IAAAA,SANE;AAOFC,IAAAA;AAPE,MAQFZ,cAAc,EARlB;;AAUA,QAAMa,gBAAgB,GAAG,YAAW;AAChC,UAAMC,YAAY,GAAGT,SAAS,GAAG,CAAjC;;AACA,QAAIJ,WAAW,CAACK,UAAD,EAAaQ,YAAb,CAAX,IAA0C,CAACJ,UAA/C,EAA4D;AACxDH,MAAAA,eAAe,CAACO,YAAD,CAAf;AACA,YAAML,cAAc,CAACD,WAAW,GAAG,CAAf,CAApB,CAFwD,CAGxD;AACA;AACH;AACJ,GARD;;AAUA,QAAMO,eAAe,GAAG,MAAM;AAC1B,UAAMC,mBAAmB,GAAGX,SAAS,GAAG,CAAxC;;AACA,QAAIW,mBAAmB,KAAKL,SAA5B,EAAuC;AACnCM,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6Bb,SAAS,GAAG,CAAzC;AACAO,MAAAA,YAAY,CAACP,SAAS,GAAG,CAAb,CAAZ;AACH;AACJ,GAND;;AAQA,sBACI;AACA,IAAA,SAAS,EAAC,UADV;AAEA,IAAA,OAAO,EAAEQ,gBAFT;AAGA,IAAA,WAAW,EAAEE,eAHb;AAAA,2BAKI;AAAK,MAAA,SAAS,EAAG,QAAOb,kBAAkB,CAACE,SAAD,CAAY;AAAtD;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAtCD;;GAAMD,I;UASEH,c;;;KATFG,I;AAwCN,eAAeA,IAAf","sourcesContent":["import React from 'react'\nimport { useGameContext } from './GameContext';\nimport { isLegalMove } from './GameLogic';\n\n\nconst diskColourToRender = {\n    0: \"empty\",\n    1: \"player-one\",\n    2: \"player-two\",\n};\n\nconst Cell = ({cellState, cellIndex}) => {\n    const {\n        boardState,\n        setColOfNewDisk, \n        moveCounter, \n        setMoveCounter, \n        isGameOver,\n        colCursor,\n        setColCursor,\n    } = useGameContext();\n\n    const selectNewDiskCol = async() => {\n        const colOfNewDisk = cellIndex % 7;\n        if (isLegalMove(boardState, colOfNewDisk) && (!isGameOver)) {\n            setColOfNewDisk(colOfNewDisk);\n            await setMoveCounter(moveCounter + 1);\n            // wait for setMoveCounter to finish before useEffect in GameContext \n            // is executed with the updated value of moveCounter.\n        }\n    };\n\n    const updateColCursor = () => {\n        const newValueOfColCursor = cellIndex % 7;\n        if (newValueOfColCursor !== colCursor) {\n            console.log(\"current col: \", cellIndex % 7)\n            setColCursor(cellIndex % 7);\n        }\n    }\n\n    return (\n        <div \n        className='gamecell' \n        onClick={selectNewDiskCol}\n        onMouseOver={updateColCursor}\n        >\n            <div className={`disk ${diskColourToRender[cellState]}`}></div>\n        </div>\n    );\n}\n\nexport default Cell;"]},"metadata":{},"sourceType":"module"}