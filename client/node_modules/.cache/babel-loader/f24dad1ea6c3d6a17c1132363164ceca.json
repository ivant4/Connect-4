{"ast":null,"code":"var _jsxFileName = \"/home/ivan/javascript_projects/connect_four/src/GameContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { isMoveLegal, findRowOfNewDisk, hasActivePlayerWon } from './GameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/React.createContext();\nconst initialBoardState = [];\n\nfor (let i = 0; i < 6; i++) {\n  initialBoardState[i] = [];\n\n  for (let j = 0; j < 7; j++) {\n    initialBoardState[i][j] = -1;\n  }\n}\n\nconst GameContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // the children being passed in is the app component!!!\n  const [boardState, setBoardState] = useState(initialBoardState);\n  const [activePlayerNum, setActivePlayerNum] = useState(1);\n  const [colOfNewDisk, setColOfNewDisk] = useState(0);\n  const [winningPlayerNum, setWinningPlayerNum] = useState(0);\n  const didMount = useRef(false);\n  useEffect(() => {\n    console.log(colOfNewDisk);\n\n    if (didMount.current && isMoveLegal(colOfNewDisk)) {\n      console.log(\"switching to next player\");\n      const rowOfNewDisk = findRowOfNewDisk(colOfNewDisk);\n\n      if (hasActivePlayerWon(boardState, activePlayerNum, [rowOfNewDisk, colOfNewDisk])) {\n        setWinningPlayerNum(activePlayerNum);\n      } else {\n        const newBoardState = boardState;\n        newBoardState[rowOfNewDisk][colOfNewDisk] = activePlayerNum;\n        setBoardState(newBoardState);\n        let nextActivePlayerNum = activePlayerNum === 1 ? 2 : 1;\n        setActivePlayerNum(nextActivePlayerNum);\n      }\n    } else {\n      didMount.current = true;\n    }\n  }, [colOfNewDisk]);\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      boardState,\n      setBoardState,\n      activePlayerNum,\n      setActivePlayerNum,\n      colOfNewDisk,\n      setColOfNewDisk\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 12\n  }, this);\n};\n\n_s(GameContextProvider, \"PBP9Nl7UTP2d9M4uJD68iBWpyR0=\");\n\n_c = GameContextProvider;\n\nconst useGameContext = () => {\n  _s2();\n\n  return useContext(GameContext);\n};\n\n_s2(useGameContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { useGameContext, GameContextProvider, initialBoardState };\n\nvar _c;\n\n$RefreshReg$(_c, \"GameContextProvider\");","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/GameContext.js"],"names":["React","useContext","useEffect","useRef","useState","isMoveLegal","findRowOfNewDisk","hasActivePlayerWon","GameContext","createContext","initialBoardState","i","j","GameContextProvider","children","boardState","setBoardState","activePlayerNum","setActivePlayerNum","colOfNewDisk","setColOfNewDisk","winningPlayerNum","setWinningPlayerNum","didMount","console","log","current","rowOfNewDisk","newBoardState","nextActivePlayerNum","useGameContext"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,EAAsCC,MAAtC,EAA8CC,QAA9C,QAA6D,OAA7D;AACA,SACIC,WADJ,EAEIC,gBAFJ,EAGIC,kBAHJ,QAIO,aAJP;;AAKA,MAAMC,WAAW,gBAAGR,KAAK,CAACS,aAAN,EAApB;AAEA,MAAMC,iBAAiB,GAAG,EAA1B;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBD,EAAAA,iBAAiB,CAACC,CAAD,CAAjB,GAAuB,EAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBF,IAAAA,iBAAiB,CAACC,CAAD,CAAjB,CAAqBC,CAArB,IAA0B,CAAC,CAA3B;AACH;AACJ;;AAED,MAAMC,mBAAmB,GAAG,QAAgB;AAAA;;AAAA,MAAf;AAACC,IAAAA;AAAD,GAAe;AACxC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAACM,iBAAD,CAA5C;AACA,QAAM,CAACO,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,CAAD,CAAtD;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACiB,gBAAD,EAAmBC,mBAAnB,IAA0ClB,QAAQ,CAAC,CAAD,CAAxD;AAEA,QAAMmB,QAAQ,GAAGpB,MAAM,CAAC,KAAD,CAAvB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZsB,IAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;;AACA,QAAII,QAAQ,CAACG,OAAT,IAAoBrB,WAAW,CAACc,YAAD,CAAnC,EAAmD;AAC/CK,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,YAAME,YAAY,GAAGrB,gBAAgB,CAACa,YAAD,CAArC;;AACA,UAAIZ,kBAAkB,CAClBQ,UADkB,EAElBE,eAFkB,EAGlB,CAACU,YAAD,EAAeR,YAAf,CAHkB,CAAtB,EAIG;AACCG,QAAAA,mBAAmB,CAACL,eAAD,CAAnB;AACH,OAND,MAMO;AACH,cAAMW,aAAa,GAAGb,UAAtB;AACAa,QAAAA,aAAa,CAACD,YAAD,CAAb,CAA4BR,YAA5B,IAA4CF,eAA5C;AACAD,QAAAA,aAAa,CAACY,aAAD,CAAb;AACA,YAAIC,mBAAmB,GAAGZ,eAAe,KAAK,CAApB,GAAwB,CAAxB,GAA4B,CAAtD;AACAC,QAAAA,kBAAkB,CAACW,mBAAD,CAAlB;AACH;AACJ,KAhBD,MAgBO;AACHN,MAAAA,QAAQ,CAACG,OAAT,GAAmB,IAAnB;AACH;AACJ,GArBQ,EAqBN,CAACP,YAAD,CArBM,CAAT;AAuBA,sBAAO,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAChCJ,MAAAA,UADgC;AAEhCC,MAAAA,aAFgC;AAGhCC,MAAAA,eAHgC;AAIhCC,MAAAA,kBAJgC;AAKhCC,MAAAA,YALgC;AAMhCC,MAAAA;AANgC,KAA7B;AAAA,cAQFN;AARE;AAAA;AAAA;AAAA;AAAA,UAAP;AAUH,CAzCD;;GAAMD,mB;;KAAAA,mB;;AA2CN,MAAMiB,cAAc,GAAG,MAAM;AAAA;;AACzB,SAAO7B,UAAU,CAACO,WAAD,CAAjB;AACH,CAFD;;IAAMsB,c;;AAIN,SAAQA,cAAR,EAAwBjB,mBAAxB,EAA6CH,iBAA7C","sourcesContent":["import React, {useContext, useEffect, useRef, useState} from 'react';\nimport {\n    isMoveLegal, \n    findRowOfNewDisk, \n    hasActivePlayerWon\n} from './GameLogic';\nconst GameContext = React.createContext();\n\nconst initialBoardState = [];\nfor (let i = 0; i < 6; i++) {\n    initialBoardState[i] = [];\n    for (let j = 0; j < 7; j++) {\n        initialBoardState[i][j] = -1;\n    }\n}\n\nconst GameContextProvider = ({children}) => {\n    // the children being passed in is the app component!!!\n    const [boardState, setBoardState] = useState(initialBoardState);\n    const [activePlayerNum, setActivePlayerNum] = useState(1);\n    const [colOfNewDisk, setColOfNewDisk] = useState(0);\n    const [winningPlayerNum, setWinningPlayerNum] = useState(0);\n\n    const didMount = useRef(false);\n    useEffect(() => {\n        console.log(colOfNewDisk);\n        if (didMount.current && isMoveLegal(colOfNewDisk)) {\n            console.log(\"switching to next player\")\n            const rowOfNewDisk = findRowOfNewDisk(colOfNewDisk);\n            if (hasActivePlayerWon(\n                boardState, \n                activePlayerNum, \n                [rowOfNewDisk, colOfNewDisk]\n            )) { \n                setWinningPlayerNum(activePlayerNum);\n            } else {\n                const newBoardState = boardState;\n                newBoardState[rowOfNewDisk][colOfNewDisk] = activePlayerNum;\n                setBoardState(newBoardState);\n                let nextActivePlayerNum = activePlayerNum === 1 ? 2 : 1;\n                setActivePlayerNum(nextActivePlayerNum);\n            }\n        } else {\n            didMount.current = true;\n        }\n    }, [colOfNewDisk]);\n    \n    return <GameContext.Provider value={{\n        boardState, \n        setBoardState,\n        activePlayerNum,\n        setActivePlayerNum,\n        colOfNewDisk,\n        setColOfNewDisk,\n    }}> \n        {children}\n    </GameContext.Provider>\n};\n\nconst useGameContext = () => {\n    return useContext(GameContext);\n}\n\nexport {useGameContext, GameContextProvider, initialBoardState};\n"]},"metadata":{},"sourceType":"module"}