{"ast":null,"code":"const isLegalMove = (boardState, col) => {\n  // is legal if there is an empty cell in this column\n  for (let i = 0; i < 6; i++) {\n    if (boardState[i][col] === 0) return true;\n  }\n\n  return false;\n};\n\nconst findRowOfNewDisk = (boardState, col) => {\n  for (let i = boardState.length - 1; i >= 0; i--) {\n    if (boardState[i][col] === 0) {\n      return i;\n    }\n  }\n};\n\nconst isWithinGameboard = (boardState, row, col) => {\n  // check if the coordinate (row, col) is inside the gameboard dimension.\n  return row < boardState.length && row >= 0 && col < boardState[0].length && col >= 0;\n};\n\nconst adjDirPairs = [[[-1, -1], [1, 1]], [[-1, 0], [1, 0]], [[-1, 1], [1, -1]], [[0, -1], [0, 1]]];\n\nconst hasActivePlayerWon = (boardState, playerNum, newDiskPos) => {\n  for (const adjDirPair of adjDirPairs) {\n    let numOfConsecutiveDisks = 0;\n\n    for (const adjDir of adjDirPair) {\n      numOfConsecutiveDisks += findNumOfConsecutiveDisks(boardState, playerNum, newDiskPos, adjDir, 0);\n    }\n\n    if (numOfConsecutiveDisks + 1 >= 4) return true;\n  }\n\n  return false;\n};\n\nconst findNumOfConsecutiveDisks = (boardState, playerNum, DiskPos, dir, numOfConsecutiveDisks) => {\n  const rowOfAdjDisk = DiskPos[0] + dir[0];\n  const colOfAdjDisk = DiskPos[1] + dir[1];\n  if (!isWithinGameboard(boardState, rowOfAdjDisk, colOfAdjDisk)) return numOfConsecutiveDisks;\n\n  if (boardState[rowOfAdjDisk][colOfAdjDisk] === playerNum) {\n    return findNumOfConsecutiveDisks(boardState, playerNum, [rowOfAdjDisk, colOfAdjDisk], dir, numOfConsecutiveDisks + 1);\n  }\n\n  return numOfConsecutiveDisks;\n};\n\nexport { isLegalMove, findRowOfNewDisk, hasActivePlayerWon };","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four_app/client/src/GameLogic.js"],"names":["isLegalMove","boardState","col","i","findRowOfNewDisk","length","isWithinGameboard","row","adjDirPairs","hasActivePlayerWon","playerNum","newDiskPos","adjDirPair","numOfConsecutiveDisks","adjDir","findNumOfConsecutiveDisks","DiskPos","dir","rowOfAdjDisk","colOfAdjDisk"],"mappings":"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","sourcesContent":["const isLegalMove = (boardState, col) => {\n    // is legal if there is an empty cell in this column\n    for (let i = 0; i < 6; i++) {\n        if (boardState[i][col] === 0) return true;\n    }\n    return false;\n};\n\nconst findRowOfNewDisk = (boardState, col) => {\n    for (let i = boardState.length - 1; i >= 0; i--) {\n        if (boardState[i][col] === 0) {\n            return i;\n        }\n    }\n};\n\nconst isWithinGameboard = (boardState, row, col) => {\n    // check if the coordinate (row, col) is inside the gameboard dimension.\n    return (\n        row < boardState.length && row >= 0 && \n        col < boardState[0].length && col >= 0\n    );\n};\n\nconst adjDirPairs = [\n    [[-1, -1], [1, 1]],\n    [[-1, 0], [1, 0]],\n    [[-1, 1], [1, -1]],\n    [[0, -1], [0, 1]],\n];\n\nconst hasActivePlayerWon = (boardState, playerNum, newDiskPos) => {\n    for (const adjDirPair of adjDirPairs) {\n        let numOfConsecutiveDisks = 0\n        for (const adjDir of adjDirPair) {\n            numOfConsecutiveDisks += findNumOfConsecutiveDisks(\n                boardState,\n                playerNum,\n                newDiskPos,\n                adjDir,\n                0\n            );\n        }\n        if (numOfConsecutiveDisks + 1 >= 4) return true;\n    }\n    return false;\n};\n\nconst findNumOfConsecutiveDisks = (\n    boardState,\n    playerNum,\n    DiskPos,\n    dir,\n    numOfConsecutiveDisks\n) => {\n    const rowOfAdjDisk = DiskPos[0] + dir[0];\n    const colOfAdjDisk = DiskPos[1] + dir[1];\n    if (!isWithinGameboard(\n            boardState, \n            rowOfAdjDisk, \n            colOfAdjDisk,\n        )) return numOfConsecutiveDisks;\n    if (boardState[rowOfAdjDisk][colOfAdjDisk] === playerNum) {\n        return findNumOfConsecutiveDisks(\n            boardState,\n            playerNum, \n            [rowOfAdjDisk, colOfAdjDisk], \n            dir,\n            numOfConsecutiveDisks + 1\n        );\n    }\n    return numOfConsecutiveDisks;\n};\n\nexport {\n    isLegalMove, \n    findRowOfNewDisk, \n    hasActivePlayerWon\n};"]},"metadata":{},"sourceType":"module"}