{"ast":null,"code":"const isLegalMove = (boardState, col) => {\n  for (let i = 0; i < 6; i++) {\n    if (boardState[i][col] === 0) return true;\n  }\n\n  return false;\n};\n\nconst findRowOfNewDisk = (boardState, col) => {\n  for (let i = boardState.length - 1; i >= 0; i--) {\n    if (boardState[i][col] === 0) {\n      return i;\n    }\n  }\n};\n\nconst adjDirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n\nconst isWithinGameboard = (boardState, row, col) => {\n  return row < boardState.length && row >= 0 && col < boardState[0].length && col >= 0;\n};\n\nconst hasActivePlayerWon = (boardState, playerNum, newCheckerPos) => {\n  for (const adjDir of adjDirs) {\n    const rowOfAdjChecker = newCheckerPos[0] + adjDir[0];\n    const colOfAdjChecker = newCheckerPos[1] + adjDir[1];\n    if (!isWithinGameboard(boardState, rowOfAdjChecker, colOfAdjChecker)) continue;\n\n    if (boardState[rowOfAdjChecker][colOfAdjChecker] === playerNum && checkForConnectFour(boardState, playerNum, [rowOfAdjChecker, colOfAdjChecker], adjDir, 2)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst adjDirs2 = [[-1, -1], [-1, 0], [-1, 1], [0, -1]];\n/*\nconst hasActivePlayerWon = (boardState, playerNum, newCheckerPos) => {\n    for (const adjDir of adjDirs2) {\n        const numOfDisksInThisDir = \n        }\n    }\n    return false;\n};\n*/\n\nconst checkForConnectFour = (boardState, playerNum, checkerPos, dir, numOfConsecutiveCheckers) => {\n  const rowOfAdjChecker = checkerPos[0] + dir[0];\n  const colOfAdjChecker = checkerPos[1] + dir[1];\n  if (!isWithinGameboard(boardState, rowOfAdjChecker, colOfAdjChecker)) return false;\n\n  if (boardState[rowOfAdjChecker][colOfAdjChecker] === playerNum) {\n    if (numOfConsecutiveCheckers + 1 >= 4) return true;\n    return checkForConnectFour(boardState, playerNum, [rowOfAdjChecker, colOfAdjChecker], dir, numOfConsecutiveCheckers + 1);\n  }\n\n  return false;\n};\n\nconst findNumOfConsecutiveDisks = (boardState, playerNum, checkerPos, dir, numOfConsecutiveCheckers) => {\n  const rowOfAdjChecker = checkerPos[0] + dir[0];\n  const colOfAdjChecker = checkerPos[1] + dir[1];\n  if (!isWithinGameboard(boardState, rowOfAdjChecker, colOfAdjChecker)) return false;\n\n  if (boardState[rowOfAdjChecker][colOfAdjChecker] === playerNum) {\n    if (numOfConsecutiveCheckers + 1 >= 4) return true;\n    return checkForConnectFour(boardState, playerNum, [rowOfAdjChecker, colOfAdjChecker], dir, numOfConsecutiveCheckers + 1);\n  }\n\n  return false;\n};\n\nexport { isLegalMove, findRowOfNewDisk, hasActivePlayerWon };","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/GameLogic.js"],"names":["isLegalMove","boardState","col","i","findRowOfNewDisk","length","adjDirs","isWithinGameboard","row","hasActivePlayerWon","playerNum","newCheckerPos","adjDir","rowOfAdjChecker","colOfAdjChecker","checkForConnectFour","adjDirs2","checkerPos","dir","numOfConsecutiveCheckers","findNumOfConsecutiveDisks"],"mappings":"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","sourcesContent":["const isLegalMove = (boardState, col) => {\n    for (let i = 0; i < 6; i++) {\n        if (boardState[i][col] === 0) return true;\n    }\n    return false;\n};\n\nconst findRowOfNewDisk = (boardState, col) => {\n    for (let i = boardState.length - 1; i >= 0; i--) {\n        if (boardState[i][col] === 0) {\n            return i;\n        }\n    }\n};\n\nconst adjDirs = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n];\n\nconst isWithinGameboard = (boardState, row, col) => {\n    return (\n        row < boardState.length && row >= 0 &&\n        col < boardState[0].length && col >= 0\n    );\n}\n\nconst hasActivePlayerWon = (boardState, playerNum, newCheckerPos) => {\n    for (const adjDir of adjDirs) {\n        const rowOfAdjChecker = newCheckerPos[0] + adjDir[0];\n        const colOfAdjChecker = newCheckerPos[1] + adjDir[1];\n        if (!isWithinGameboard(\n            boardState, \n            rowOfAdjChecker, \n            colOfAdjChecker\n            )) continue;\n        if (boardState[rowOfAdjChecker][colOfAdjChecker] === playerNum &&\n            checkForConnectFour(\n                boardState, \n                playerNum, \n                [rowOfAdjChecker, colOfAdjChecker], \n                adjDir, \n                2\n            )) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst adjDirs2 = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n];\n/*\nconst hasActivePlayerWon = (boardState, playerNum, newCheckerPos) => {\n    for (const adjDir of adjDirs2) {\n        const numOfDisksInThisDir = \n        }\n    }\n    return false;\n};\n*/\n\nconst checkForConnectFour = (\n    boardState,\n    playerNum,\n    checkerPos,\n    dir,\n    numOfConsecutiveCheckers\n) => {\n    const rowOfAdjChecker = checkerPos[0] + dir[0];\n    const colOfAdjChecker = checkerPos[1] + dir[1];\n    if (!isWithinGameboard(\n            boardState, \n            rowOfAdjChecker, \n            colOfAdjChecker\n        )) return false;\n    if (boardState[rowOfAdjChecker][colOfAdjChecker] === playerNum) {\n        if (numOfConsecutiveCheckers + 1 >= 4) return true\n        return checkForConnectFour(\n            boardState, \n            playerNum, \n            [rowOfAdjChecker, colOfAdjChecker], \n            dir, \n            numOfConsecutiveCheckers + 1\n        );\n    }\n    return false;\n};\n\nconst findNumOfConsecutiveDisks = (\n    boardState,\n    playerNum,\n    checkerPos,\n    dir,\n    numOfConsecutiveCheckers\n) => {\n    const rowOfAdjChecker = checkerPos[0] + dir[0];\n    const colOfAdjChecker = checkerPos[1] + dir[1];\n    if (!isWithinGameboard(\n            boardState, \n            rowOfAdjChecker, \n            colOfAdjChecker\n        )) return false;\n    if (boardState[rowOfAdjChecker][colOfAdjChecker] === playerNum) {\n        if (numOfConsecutiveCheckers + 1 >= 4) return true\n        return checkForConnectFour(\n            boardState, \n            playerNum, \n            [rowOfAdjChecker, colOfAdjChecker], \n            dir, \n            numOfConsecutiveCheckers + 1\n        );\n    }\n    return false;\n};\n\n\nexport {\n    isLegalMove, \n    findRowOfNewDisk, \n    hasActivePlayerWon\n};"]},"metadata":{},"sourceType":"module"}