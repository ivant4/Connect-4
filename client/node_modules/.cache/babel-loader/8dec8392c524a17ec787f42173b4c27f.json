{"ast":null,"code":"const isMoveLegal = (boardState, col) => {\n  for (let i = 0; i < 6; i++) {\n    if (boardState[i][col] === 0) return true;\n  }\n\n  return false;\n};\n\nconst findRowOfNewDisk = (boardState, col) => {\n  console.log(\"number of rows\", boardState.length);\n\n  for (let i = boardState.length - 1; i >= 0; i--) {\n    console.log(boardState[i][col]);\n\n    if (boardState[i][col] === 0) {\n      console.log(i, col);\n      return i;\n    }\n  }\n};\n\nconst isGameboardFilled = moveCounter => {\n  return moveCounter >= 42;\n};\n\nconst adjDirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n\nconst hasActivePlayerWon = (boardState, playerNum, newCheckerPos) => {\n  // consider the boundary of the board eg. row of -1 or 6\n  for (const adjDir of adjDirs) {\n    const rowOfAdjChecker = newCheckerPos[0] + adjDir[0];\n    const colOfAdjChecker = newCheckerPos[1] + adjDir[1]; // check if the row or col is out of bound from the board\n\n    if (rowOfAdjChecker >= boardState.length || rowOfAdjChecker < 0) continue;\n    if (colOfAdjChecker >= boardState[0].length || colOfAdjChecker < 0) continue;\n\n    if (boardState[rowOfAdjChecker][colOfAdjChecker] === playerNum && checkForConnectFour(boardState, playerNum, [rowOfAdjChecker, colOfAdjChecker], adjDir, 2)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst checkForConnectFour = (boardState, playerNum, checkerPos, dir, numOfConsecutiveCheckers) => {\n  const rowOfAdjChecker = checkerPos[0] + dir[0];\n  const colOfAdjChecker = checkerPos[1] + dir[1];\n\n  if (boardState[rowOfAdjChecker][colOfAdjChecker] === playerNum) {\n    if (numOfConsecutiveCheckers + 1 >= 4) return true;\n    return checkForConnectFour(boardState, playerNum, [rowOfAdjChecker, colOfAdjChecker], dir, numOfConsecutiveCheckers + 1);\n  }\n\n  return false;\n};\n\nexport { isMoveLegal, findRowOfNewDisk, isGameboardFilled, hasActivePlayerWon };","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/GameLogic.js"],"names":["isMoveLegal","boardState","col","i","findRowOfNewDisk","console","log","length","isGameboardFilled","moveCounter","adjDirs","hasActivePlayerWon","playerNum","newCheckerPos","adjDir","rowOfAdjChecker","colOfAdjChecker","checkForConnectFour","checkerPos","dir","numOfConsecutiveCheckers"],"mappings":"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","sourcesContent":["const isMoveLegal = (boardState, col) => {\n    for (let i = 0; i < 6; i++) {\n        if (boardState[i][col] === 0) return true;\n    }\n    return false;\n};\n\nconst findRowOfNewDisk = (boardState, col) => {\n    console.log(\"number of rows\",boardState.length);\n    for (let i = boardState.length - 1; i >= 0; i--) {\n        console.log(boardState[i][col]);\n        if (boardState[i][col] === 0) {\n            console.log(i, col)\n            return i;\n        }\n    }\n};\n\nconst isGameboardFilled = (moveCounter) => {\n    return (moveCounter >= 42);\n};\n\nconst adjDirs = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n];\n\nconst hasActivePlayerWon = (boardState, playerNum, newCheckerPos) => {\n    // consider the boundary of the board eg. row of -1 or 6\n    for (const adjDir of adjDirs) {\n        const rowOfAdjChecker = newCheckerPos[0] + adjDir[0];\n        const colOfAdjChecker = newCheckerPos[1] + adjDir[1];\n        // check if the row or col is out of bound from the board\n        if (rowOfAdjChecker >= boardState.length || rowOfAdjChecker < 0) continue;\n        if (colOfAdjChecker >= boardState[0].length || colOfAdjChecker < 0) continue;\n\n        if (boardState[rowOfAdjChecker][colOfAdjChecker] === playerNum &&\n            checkForConnectFour(\n                boardState, \n                playerNum, \n                [rowOfAdjChecker, colOfAdjChecker], \n                adjDir, \n                2\n            )) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst checkForConnectFour = (\n    boardState,\n    playerNum,\n    checkerPos,\n    dir,\n    numOfConsecutiveCheckers\n) => {\n    const rowOfAdjChecker = checkerPos[0] + dir[0];\n    const colOfAdjChecker = checkerPos[1] + dir[1];\n    if (boardState[rowOfAdjChecker][colOfAdjChecker] === playerNum) {\n        if (numOfConsecutiveCheckers + 1 >= 4) return true\n        return checkForConnectFour(\n            boardState, \n            playerNum, \n            [rowOfAdjChecker, colOfAdjChecker], \n            dir, \n            numOfConsecutiveCheckers + 1\n        );\n    }\n    return false;\n};\n\nexport {\n    isMoveLegal, \n    findRowOfNewDisk, \n    isGameboardFilled, \n    hasActivePlayerWon\n};"]},"metadata":{},"sourceType":"module"}