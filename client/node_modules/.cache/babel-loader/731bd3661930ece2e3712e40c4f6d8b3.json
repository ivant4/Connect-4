{"ast":null,"code":"var _jsxFileName = \"/home/ivan/javascript_projects/connect_four/src/GameContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { isLegalMove, findRowOfNewDisk, hasActivePlayerWon } from './GameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/React.createContext();\nconst initialBoardState = [];\n\nfor (let i = 0; i < 6; i++) {\n  initialBoardState[i] = [];\n\n  for (let j = 0; j < 7; j++) {\n    initialBoardState[i][j] = 0;\n  }\n}\n\nconst GameContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // the children being passed in is the app component!!!\n  const [boardState, setBoardState] = useState(initialBoardState.map(elem => [...elem]));\n  const [activePlayerNum, setActivePlayerNum] = useState(1);\n  const [colOfNewDisk, setColOfNewDisk] = useState(0);\n  const [winningPlayerNum, setWinningPlayerNum] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [moveCounter, setMoveCounter] = useState(0);\n  const didMount = useRef(false);\n  useEffect(() => {\n    if (didMount.current && isLegalMove(boardState, colOfNewDisk)) {\n      const rowOfNewDisk = findRowOfNewDisk(boardState, colOfNewDisk);\n      const newBoardState = boardState;\n      newBoardState[rowOfNewDisk][colOfNewDisk] = activePlayerNum;\n      setBoardState(newBoardState);\n\n      if (hasActivePlayerWon(boardState, activePlayerNum, [rowOfNewDisk, colOfNewDisk])) {\n        setWinningPlayerNum(activePlayerNum);\n        setIsGameOver(true);\n      } else if (moveCounter >= 42) {\n        // Draw\n        setIsGameOver(true);\n      } else {\n        const nextActivePlayerNum = activePlayerNum === 1 ? 2 : 1;\n        setActivePlayerNum(nextActivePlayerNum);\n      }\n    } else {\n      didMount.current = true;\n    }\n  }, [moveCounter]);\n\n  const resetGame = () => {\n    setActivePlayerNum(1);\n    setBoardState(initialBoardState);\n    setMoveCounter(0);\n    setIsGameOver(false);\n    setWinningPlayerNum(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      boardState,\n      activePlayerNum,\n      colOfNewDisk,\n      setColOfNewDisk,\n      moveCounter,\n      setMoveCounter,\n      winningPlayerNum,\n      isGameOver,\n      resetGame\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 12\n  }, this);\n};\n\n_s(GameContextProvider, \"MZMl9Kw0gq1C2OdRBioMPf3kZWU=\");\n\n_c = GameContextProvider;\n\nconst useGameContext = () => {\n  _s2();\n\n  return useContext(GameContext);\n};\n\n_s2(useGameContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { useGameContext, GameContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GameContextProvider\");","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/GameContext.js"],"names":["React","useContext","useEffect","useRef","useState","isLegalMove","findRowOfNewDisk","hasActivePlayerWon","GameContext","createContext","initialBoardState","i","j","GameContextProvider","children","boardState","setBoardState","map","elem","activePlayerNum","setActivePlayerNum","colOfNewDisk","setColOfNewDisk","winningPlayerNum","setWinningPlayerNum","isGameOver","setIsGameOver","moveCounter","setMoveCounter","didMount","current","rowOfNewDisk","newBoardState","nextActivePlayerNum","resetGame","useGameContext"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useRef, useState} from 'react';\nimport {\n    isLegalMove, \n    findRowOfNewDisk, \n    hasActivePlayerWon\n} from './GameLogic';\nconst GameContext = React.createContext();\n\nconst initialBoardState = [];\nfor (let i = 0; i < 6; i++) {\n    initialBoardState[i] = [];\n    for (let j = 0; j < 7; j++) {\n        initialBoardState[i][j] = 0;\n    }\n}\n\nconst GameContextProvider = ({children}) => {\n    // the children being passed in is the app component!!!\n    const [boardState, setBoardState] = useState(initialBoardState.map(elem => [...elem]));\n    const [activePlayerNum, setActivePlayerNum] = useState(1);\n    const [colOfNewDisk, setColOfNewDisk] = useState(0);\n    const [winningPlayerNum, setWinningPlayerNum] = useState(0);\n    const [isGameOver, setIsGameOver] = useState(false);\n    const [moveCounter, setMoveCounter] = useState(0);\n\n    const didMount = useRef(false);\n    useEffect(() => {\n        if (didMount.current && isLegalMove(boardState, colOfNewDisk)) {\n            const rowOfNewDisk = findRowOfNewDisk(boardState, colOfNewDisk);\n            const newBoardState = boardState;\n            newBoardState[rowOfNewDisk][colOfNewDisk] = activePlayerNum;\n            setBoardState(newBoardState);\n            if (hasActivePlayerWon(\n                boardState, \n                activePlayerNum, \n                [rowOfNewDisk, colOfNewDisk]\n            )) { \n                setWinningPlayerNum(activePlayerNum);\n                setIsGameOver(true);\n            } else if (moveCounter >= 42) { \n                // Draw\n                setIsGameOver(true);\n            } else {\n                const nextActivePlayerNum = activePlayerNum === 1 ? 2 : 1;\n                setActivePlayerNum(nextActivePlayerNum);\n            }\n        } else {\n            didMount.current = true;\n        }\n    }, [moveCounter]);\n\n    const resetGame = () => {\n        setActivePlayerNum(1);\n        setBoardState(initialBoardState);\n        setMoveCounter(0);\n        setIsGameOver(false);\n        setWinningPlayerNum(0);\n    };\n    \n    return <GameContext.Provider value={{\n        boardState, \n        activePlayerNum,\n        colOfNewDisk,\n        setColOfNewDisk,\n        moveCounter, \n        setMoveCounter,\n        winningPlayerNum,\n        isGameOver,\n        resetGame,\n    }}> \n        {children}\n    </GameContext.Provider>\n};\n\nconst useGameContext = () => {\n    return useContext(GameContext);\n}\n\nexport {useGameContext, GameContextProvider};\n"]},"metadata":{},"sourceType":"module"}