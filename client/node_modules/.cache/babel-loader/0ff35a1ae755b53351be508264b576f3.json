{"ast":null,"code":"const isLegalMove = (boardState, col) => {\n  for (let i = 0; i < 6; i++) {\n    if (boardState[i][col] === 0) return true;\n  }\n\n  return false;\n};\n\nconst findRowOfNewDisk = (boardState, col) => {\n  for (let i = boardState.length - 1; i >= 0; i--) {\n    if (boardState[i][col] === 0) {\n      return i;\n    }\n  }\n};\n\nconst adjDirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n\nconst isWithinGameboard = (boardState, row, col) => {\n  return row < boardState.length && row >= 0 && col < boardState[0].length && col >= 0;\n};\n/*\nconst hasActivePlayerWon = (boardState, playerNum, newDiskPos) => {\n    for (const adjDir of adjDirs) {\n        const rowOfAdjDisk = newDiskPos[0] + adjDir[0];\n        const colOfAdjDisk = newDiskPos[1] + adjDir[1];\n        if (!isWithinGameboard(\n            boardState, \n            rowOfAdjDisk, \n            colOfAdjDisk\n            )) continue;\n        if (boardState[rowOfAdjDisk][colOfAdjDisk] === playerNum &&\n            checkForConnectFour(\n                boardState, \n                playerNum, \n                [rowOfAdjDisk, colOfAdjDisk], \n                adjDir, \n                2\n            )) {\n            return true;\n        }\n    }\n    return false;\n};\n*/\n\n\nconst adjDirPairs = [[[-1, -1], [1, 1]], [[-1, 0], [1, 0]], [[-1, 1], [1, -1]], [[0, -1], [0, 1]]];\n\nconst hasActivePlayerWon = (boardState, playerNum, newDiskPos) => {\n  for (const adjDirPair of adjDirPairs) {\n    let numOfConsecutiveDisks = 0;\n\n    for (const adjDir in adjDirPair) {\n      numOfConsecutiveDisks += findNumOfConsecutiveDisks(boardState, playerNum, newDiskPos, adjDir, 0);\n    }\n\n    if (numOfConsecutiveDisks + 1 >= 4) return true;\n  }\n\n  return false;\n};\n\nconst checkForConnectFour = (boardState, playerNum, DiskPos, dir, numOfConsecutiveDisks) => {\n  const rowOfAdjDisk = DiskPos[0] + dir[0];\n  const colOfAdjDisk = DiskPos[1] + dir[1];\n  if (!isWithinGameboard(boardState, rowOfAdjDisk, colOfAdjDisk)) return false;\n\n  if (boardState[rowOfAdjDisk][colOfAdjDisk] === playerNum) {\n    if (numOfConsecutiveDisks + 1 >= 4) return true;\n    return checkForConnectFour(boardState, playerNum, [rowOfAdjDisk, colOfAdjDisk], dir, numOfConsecutiveDisks + 1);\n  }\n\n  return false;\n};\n\nconst findNumOfConsecutiveDisks = (boardState, playerNum, DiskPos, dir, numOfConsecutiveDisks) => {\n  const rowOfAdjDisk = DiskPos[0] + dir[0];\n  const colOfAdjDisk = DiskPos[1] + dir[1];\n  console.log(dir);\n  if (!isWithinGameboard(boardState, rowOfAdjDisk, colOfAdjDisk)) return numOfConsecutiveDisks;\n\n  if (boardState[rowOfAdjDisk][colOfAdjDisk] === playerNum) {\n    return checkForConnectFour(boardState, playerNum, [rowOfAdjDisk, colOfAdjDisk], dir, numOfConsecutiveDisks + 1);\n  }\n\n  return numOfConsecutiveDisks;\n};\n\nexport { isLegalMove, findRowOfNewDisk, hasActivePlayerWon };","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/GameLogic.js"],"names":["isLegalMove","boardState","col","i","findRowOfNewDisk","length","adjDirs","isWithinGameboard","row","adjDirPairs","hasActivePlayerWon","playerNum","newDiskPos","adjDirPair","numOfConsecutiveDisks","adjDir","findNumOfConsecutiveDisks","checkForConnectFour","DiskPos","dir","rowOfAdjDisk","colOfAdjDisk","console","log"],"mappings":"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","sourcesContent":["const isLegalMove = (boardState, col) => {\n    for (let i = 0; i < 6; i++) {\n        if (boardState[i][col] === 0) return true;\n    }\n    return false;\n};\n\nconst findRowOfNewDisk = (boardState, col) => {\n    for (let i = boardState.length - 1; i >= 0; i--) {\n        if (boardState[i][col] === 0) {\n            return i;\n        }\n    }\n};\n\nconst adjDirs = [\n    [-1, -1],\n    [-1, 0],\n    [-1, 1],\n    [0, -1],\n    [0, 1],\n    [1, -1],\n    [1, 0],\n    [1, 1],\n];\n\nconst isWithinGameboard = (boardState, row, col) => {\n    return (\n        row < boardState.length && row >= 0 &&\n        col < boardState[0].length && col >= 0\n    );\n}\n/*\nconst hasActivePlayerWon = (boardState, playerNum, newDiskPos) => {\n    for (const adjDir of adjDirs) {\n        const rowOfAdjDisk = newDiskPos[0] + adjDir[0];\n        const colOfAdjDisk = newDiskPos[1] + adjDir[1];\n        if (!isWithinGameboard(\n            boardState, \n            rowOfAdjDisk, \n            colOfAdjDisk\n            )) continue;\n        if (boardState[rowOfAdjDisk][colOfAdjDisk] === playerNum &&\n            checkForConnectFour(\n                boardState, \n                playerNum, \n                [rowOfAdjDisk, colOfAdjDisk], \n                adjDir, \n                2\n            )) {\n            return true;\n        }\n    }\n    return false;\n};\n*/\nconst adjDirPairs = [\n    [[-1, -1], [1, 1]],\n    [[-1, 0], [1, 0]],\n    [[-1, 1], [1, -1]],\n    [[0, -1], [0, 1]],\n];\n\nconst hasActivePlayerWon = (boardState, playerNum, newDiskPos) => {\n    for (const adjDirPair of adjDirPairs) {\n        let numOfConsecutiveDisks = 0\n        for (const adjDir in adjDirPair) {\n            numOfConsecutiveDisks += findNumOfConsecutiveDisks(\n                boardState,\n                playerNum,\n                newDiskPos,\n                adjDir,\n                0\n            );\n        }\n        if (numOfConsecutiveDisks + 1 >= 4) return true;\n    }\n    return false;\n};\n\nconst checkForConnectFour = (\n    boardState,\n    playerNum,\n    DiskPos,\n    dir,\n    numOfConsecutiveDisks\n) => {\n    const rowOfAdjDisk = DiskPos[0] + dir[0];\n    const colOfAdjDisk = DiskPos[1] + dir[1];\n    if (!isWithinGameboard(\n            boardState, \n            rowOfAdjDisk, \n            colOfAdjDisk\n        )) return false;\n    if (boardState[rowOfAdjDisk][colOfAdjDisk] === playerNum) {\n        if (numOfConsecutiveDisks + 1 >= 4) return true\n        return checkForConnectFour(\n            boardState, \n            playerNum, \n            [rowOfAdjDisk, colOfAdjDisk], \n            dir, \n            numOfConsecutiveDisks + 1\n        );\n    }\n    return false;\n};\n\nconst findNumOfConsecutiveDisks = (\n    boardState,\n    playerNum,\n    DiskPos,\n    dir,\n    numOfConsecutiveDisks\n) => {\n    const rowOfAdjDisk = DiskPos[0] + dir[0];\n    const colOfAdjDisk = DiskPos[1] + dir[1];\n    console.log(dir)\n    if (!isWithinGameboard(\n            boardState, \n            rowOfAdjDisk, \n            colOfAdjDisk\n        )) return numOfConsecutiveDisks;\n    if (boardState[rowOfAdjDisk][colOfAdjDisk] === playerNum) {\n        return checkForConnectFour(\n            boardState,\n            playerNum, \n            [rowOfAdjDisk, colOfAdjDisk], \n            dir, \n            numOfConsecutiveDisks + 1\n        );\n    }\n    return numOfConsecutiveDisks;\n};\n\n\nexport {\n    isLegalMove, \n    findRowOfNewDisk, \n    hasActivePlayerWon\n};"]},"metadata":{},"sourceType":"module"}