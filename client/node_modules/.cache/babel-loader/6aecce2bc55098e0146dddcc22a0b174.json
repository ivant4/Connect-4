{"ast":null,"code":"var _jsxFileName = \"/home/ivan/javascript_projects/connect_four/src/GameContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { isLegalMove, findRowOfNewDisk, hasActivePlayerWon } from './GameLogic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameContext = /*#__PURE__*/React.createContext();\nconst initialBoardState = [];\n\nfor (let i = 0; i < 6; i++) {\n  initialBoardState[i] = [];\n\n  for (let j = 0; j < 7; j++) {\n    initialBoardState[i][j] = 0;\n  }\n}\n\nconst GameContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  // the children being passed in is the app component!!!\n  // do all of these variables need to be useState or can they be useRef ? activePlayerNum, boardState\n  const [boardState, setBoardState] = useState(initialBoardState.map(elem => [...elem]));\n  const [colOfNewDisk, setColOfNewDisk] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [moveCounter, setMoveCounter] = useState(0);\n  const [currentCol, setCurrentCol] = useState(0);\n  const cellIndexOfNewDisk = useRef();\n  const winningPlayerNum = useRef(0);\n  const activePlayerNum = useRef(1);\n  useEffect(() => {\n    if (moveCounter === 0) return; // during inital render and game resets\n\n    const rowOfNewDisk = findRowOfNewDisk(boardState, colOfNewDisk);\n    boardState[rowOfNewDisk][colOfNewDisk] = activePlayerNum;\n    cellIndexOfNewDisk.current = rowOfNewDisk * 7 + colOfNewDisk;\n    setBoardState(boardState);\n\n    if (hasActivePlayerWon(boardState, activePlayerNum, [rowOfNewDisk, colOfNewDisk])) {\n      winningPlayerNum.current = activePlayerNum;\n      setIsGameOver(true);\n    } else if (moveCounter >= 42) {\n      // Draw\n      setIsGameOver(true);\n    } else {\n      activePlayerNum.current = activePlayerNum.current === 1 ? 2 : 1;\n    }\n  }, [moveCounter]);\n\n  const resetGame = async () => {\n    await setIsGameOver(false); // to prevent the gameover Modal from updating to an incorrect message\n\n    activePlayerNum.current = 1;\n    setBoardState(initialBoardState.map(elem => [...elem]));\n    setMoveCounter(0);\n    winningPlayerNum.current = 0;\n    cellIndexOfNewDisk.current = undefined;\n  };\n\n  return /*#__PURE__*/_jsxDEV(GameContext.Provider, {\n    value: {\n      boardState,\n      activePlayerNum,\n      colOfNewDisk,\n      setColOfNewDisk,\n      moveCounter,\n      setMoveCounter,\n      isGameOver,\n      resetGame,\n      currentCol,\n      setCurrentCol,\n      cellIndexOfNewDisk: cellIndexOfNewDisk.current,\n      winningPlayerNum: winningPlayerNum.current\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 12\n  }, this);\n};\n\n_s(GameContextProvider, \"r3PPLF0G6JpPaYeJAwz4WtB/C5c=\");\n\n_c = GameContextProvider;\n\nconst useGameContext = () => {\n  _s2();\n\n  return useContext(GameContext);\n};\n\n_s2(useGameContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { useGameContext, GameContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"GameContextProvider\");","map":{"version":3,"sources":["/home/ivan/javascript_projects/connect_four/src/GameContext.js"],"names":["React","useContext","useEffect","useRef","useState","isLegalMove","findRowOfNewDisk","hasActivePlayerWon","GameContext","createContext","initialBoardState","i","j","GameContextProvider","children","boardState","setBoardState","map","elem","colOfNewDisk","setColOfNewDisk","isGameOver","setIsGameOver","moveCounter","setMoveCounter","currentCol","setCurrentCol","cellIndexOfNewDisk","winningPlayerNum","activePlayerNum","rowOfNewDisk","current","resetGame","undefined","useGameContext"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useRef, useState} from 'react';\nimport {\n    isLegalMove, \n    findRowOfNewDisk, \n    hasActivePlayerWon\n} from './GameLogic';\nconst GameContext = React.createContext();\n\nconst initialBoardState = [];\nfor (let i = 0; i < 6; i++) {\n    initialBoardState[i] = [];\n    for (let j = 0; j < 7; j++) {\n        initialBoardState[i][j] = 0;\n    }\n}\n\nconst GameContextProvider = ({children}) => {\n    // the children being passed in is the app component!!!\n    // do all of these variables need to be useState or can they be useRef ? activePlayerNum, boardState\n    const [boardState, setBoardState] = useState(initialBoardState.map(elem => [...elem]));\n    const [colOfNewDisk, setColOfNewDisk] = useState(0);\n    const [isGameOver, setIsGameOver] = useState(false);\n    const [moveCounter, setMoveCounter] = useState(0);\n    const [currentCol, setCurrentCol] = useState(0);\n\n    const cellIndexOfNewDisk = useRef();\n    const winningPlayerNum = useRef(0);\n    const activePlayerNum = useRef(1);\n\n    useEffect(() => {\n        if (moveCounter === 0) return; // during inital render and game resets\n        const rowOfNewDisk = findRowOfNewDisk(boardState, colOfNewDisk);\n        boardState[rowOfNewDisk][colOfNewDisk] = activePlayerNum;\n        cellIndexOfNewDisk.current = (rowOfNewDisk * 7) + colOfNewDisk;\n        setBoardState(boardState);\n        if (hasActivePlayerWon(\n            boardState, \n            activePlayerNum, \n            [rowOfNewDisk, colOfNewDisk]\n        )) {\n            winningPlayerNum.current = activePlayerNum; \n            setIsGameOver(true);\n        } else if (moveCounter >= 42) { \n            // Draw\n            setIsGameOver(true);\n        } else {\n            activePlayerNum.current = activePlayerNum.current === 1 ? 2 : 1;\n        }\n    }, [moveCounter]);\n\n    const resetGame = async () => {\n        await setIsGameOver(false); \n        // to prevent the gameover Modal from updating to an incorrect message\n        activePlayerNum.current = 1;\n        setBoardState(initialBoardState.map(elem => [...elem]));\n        setMoveCounter(0);\n        winningPlayerNum.current = 0;\n        cellIndexOfNewDisk.current = undefined;\n    };\n    \n    return <GameContext.Provider value={{\n        boardState, \n        activePlayerNum,\n        colOfNewDisk,\n        setColOfNewDisk,\n        moveCounter, \n        setMoveCounter,\n        isGameOver,\n        resetGame,\n        currentCol,\n        setCurrentCol,\n        cellIndexOfNewDisk: cellIndexOfNewDisk.current,\n        winningPlayerNum: winningPlayerNum.current,\n    }}> \n        {children}\n    </GameContext.Provider>\n};\n\nconst useGameContext = () => {\n    return useContext(GameContext);\n}\n\nexport {useGameContext, GameContextProvider};\n"]},"metadata":{},"sourceType":"module"}